# ===========================
# History Settings
# ===========================
setopt append_history
setopt inc_append_history
setopt share_history
setopt hist_ignore_all_dups

autoload -Uz compinit
compinit

# ===========================
# Environment Variables
# ===========================
source ~/.env   # mainly API keys

export PATH="/usr/local/sbin:/usr/local/bin:$HOME/bin:$HOME/go/bin:$PATH"
export PATH="/usr/local/opt/texinfo/bin:$PATH"
export PATH="$PATH:/usr/local/texlive/2024/bin/universal-darwin"
#export PATH="$(brew --prefix openssh)/bin:$PATH"

export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export EDITOR=nvim

# GPG Agent Configuration
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
GPG_TTY=$(tty)
export GPG_TTY

# ===========================
# Gatekeeper Aliases
# ===========================

alias approvebb='sudo spctl --add /Applications/Betterbird.app'
alias approvechromium='sudo spctl --add /Applications/Chromium.app'

# ===========================
# App Aliases
# ===========================

alias dig='doggo'
alias more="bat --theme 'ansi'"
alias top="htop -C"
alias vim='nvim'
alias vi='nvim'
alias naps2.console="/Applications/NAPS2.app/Contents/MacOS/NAPS2 console"

# ===========================
# Extending Commands Aliases
# ===========================

alias brewupdate='brew update && brew upgrade && brew upgrade --casks --greedy'
alias eza="eza --color-scale=all --color-scale-mode=gradient -l"
alias gpgstart='gpg-connect-agent updatestartuptty /bye; gpgconf --kill gpg-agent && gpg-agent --homedir /Users/nali/.gnupg --enable-ssh-support --daemon -q --debug-level none'
alias adguardfrigg='ADGUARD_IP=$ADGUARD1_IP ADGUARD_PORT=$ADGUARD1_PORT ADGUARD_USERNAME=$ADGUARD1_USERNAME ADGUARD_PASSWORD=$ADGUARD1_PASSWORD adguardian'
alias adguardbalder='ADGUARD_IP=$ADGUARD2_IP ADGUARD_PORT=$ADGUARD2_PORT ADGUARD_USERNAME=$ADGUARD2_USERNAME ADGUARD_PASSWORD=$ADGUARD2_PASSWORD adguardian'

# ===========================
# Autoloads and Initializations
# ===========================
autoload throw catch

# ===========================
# Starship prompt
# ===========================
export STARSHIP_CONFIG=~/.config/starship/starship.toml
eval "$(starship init zsh)"
# ===========================
# Autoloads and Initializations
# ===========================
autoload throw catch

# ===========================
# Starship prompt
# ===========================
export STARSHIP_CONFIG=~/.config/starship/starship.toml
eval "$(starship init zsh)"

# ===========================
# FZF
# ===========================
eval "$(fzf --zsh)"
alias fzfpreview="fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'"

## Use FZF to search zsh history
fh() {
    eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# ===========================
# Zoxide Custom Functions
# ===========================
eval "$(zoxide init zsh --cmd cd)"
function z() {
    __zoxide_z "$@" && eza -G --color-scale=all --color-scale-mode=gradient -l
}

function zi() {
    __zoxide_zi "$@" && eza -G --color-scale=all --color-scale-mode=gradient -l
}

# ===========================
# MISE
# ===========================
eval "$(/Users/nali/.local/bin/mise activate zsh)"
export PATH="$PATH:$HOME/.local/share/mise/installs/go/latest/bin"

# ===========================
# Easier editing of gpg encrypted files
# ===========================
edit-gpg() {
    # Edit GPG encrypted files on macOS
    # Usage: edit-gpg <file.gpg> [recipient-email]
    
    local gpg_file="$1"
    local recipient="${2:-}"
    local temp_file
    local recipients
    
    # Check arguments
    if [[ $# -lt 1 ]]; then
        echo "Usage: edit-gpg <file.gpg> [recipient-email]"
        echo "Example: edit-gpg secret.gpg john@example.com"
        return 1
    fi
    
    # Check if file exists
    if [[ ! -f "$gpg_file" ]]; then
        echo "‚ùå Error: File '$gpg_file' not found"
        return 1
    fi
    
    # Check if gpg is available
    if ! command -v gpg &> /dev/null; then
        echo "‚ùå Error: GPG not found. Install with: brew install gnupg"
        return 1
    fi
    
    # Create secure temporary file
    temp_file=$(mktemp -t "gpg_edit_XXXXXX")
    
    # Cleanup function
    local cleanup() {
        if [[ -f "$temp_file" ]]; then
            rm -P "$temp_file" 2>/dev/null || rm "$temp_file"
        fi
    }
    
    # Set up cleanup - use local trap that won't affect global shell
    {
        echo "üîì Decrypting $gpg_file..."
        
        # Decrypt file
        if ! gpg --quiet --decrypt "$gpg_file" > "$temp_file"; then
            echo "‚ùå Failed to decrypt file. Check your GPG setup."
            cleanup
            return 1
        fi
        
        echo "‚úèÔ∏è  Opening editor..."
        
        # Determine editor
        local editor="${EDITOR:-${VISUAL:-nano}}"
        
        # Open editor
        if ! "$editor" "$temp_file"; then
            echo "‚ùå Editor exited with error"
            cleanup
            return 1
        fi
        
        # Check if file was modified
        if [[ ! -s "$temp_file" ]]; then
            echo "‚ö†Ô∏è  File is empty, skipping encryption"
            cleanup
            return 1
        fi
        
        # Determine recipient
        if [[ -z "$recipient" ]]; then
            # Try to extract recipients from original file
            echo "üîç Detecting recipients from original file..."
            recipients=$(gpg --list-packets "$gpg_file" 2>/dev/null | grep "keyid" | sed 's/.*keyid //' | tr '\n' ' ')
            
            if [[ -n "$recipients" ]]; then
                echo "üìß Found recipients: $recipients"
                # Use first recipient found
                recipient=$(echo "$recipients" | awk '{print $1}')
            else
                echo "‚ùì No recipient specified and none found in file."
                echo "Available keys:"
                gpg --list-keys --keyid-format SHORT
                read "recipient?Enter recipient (email or key ID): "
            fi
        fi
        
        # Validate recipient
        if [[ -z "$recipient" ]]; then
            echo "‚ùå No recipient specified"
            cleanup
            return 1
        fi
        
        echo "üîê Encrypting with recipient: $recipient"
        
        # Create backup
        cp "$gpg_file" "${gpg_file}.backup"
        
        # Encrypt file - ADD --yes flag to auto-overwrite
        if gpg --quiet --yes --trust-model always --encrypt --armor --recipient "$recipient" --output "$gpg_file" "$temp_file"; then
            echo "‚úÖ Successfully encrypted $gpg_file"
            rm "${gpg_file}.backup"
        else
            echo "‚ùå Encryption failed, restoring backup"
            mv "${gpg_file}.backup" "$gpg_file"
            cleanup
            return 1
        fi
        
        echo "üéâ Done!"
        
    } always {
        # This always runs, even if interrupted
        cleanup
    }
}

# ===========================
# Load Additional Configurations
# ===========================
source ~/.zshrc_extra

